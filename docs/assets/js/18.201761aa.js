(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{289:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"函数-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数-function"}},[t._v("#")]),t._v(" 函数/Function")]),t._v(" "),s("h2",{attrs:{id:"函数声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数声明"}},[t._v("#")]),t._v(" 函数声明")]),t._v(" "),s("p",[t._v("Go 的函数声明分为五部分：")]),t._v(" "),s("ol",[s("li",[t._v("关键字 "),s("code",[t._v("func")])]),t._v(" "),s("li",[t._v("函数名，大写开头表示可以导出，小写则不行。")]),t._v(" "),s("li",[t._v("参数列表")]),t._v(" "),s("li",[t._v("返回值列表")]),t._v(" "),s("li",[t._v("函数体")])]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"参数拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数拷贝"}},[t._v("#")]),t._v(" 参数拷贝")]),t._v(" "),s("p",[t._v("Go 语言中，函数参数传递采用是 值传递 的方式。 所谓“值传递” ， 就是将实际参数在内存 中的表示 逐位拷贝 （ Bitwise Copy ） 到形式参数中。 对于像整型、 数组、 结构体这类类 型，它们的内存表示就是它们自身的数据内容，因此当这些类型作为实参类型时，值传递 拷贝的就是它们自身，传递的开销也与它们自身的大小成正比。")]),t._v(" "),s("p",[t._v("但是像 string、 切片、 map 这些类型就不是了，它们的内存表示对应的是它们数据内容 的 “描述符” 。 当这些类型作为实参类型时，值传递拷贝的也是它们数据内容的“描述 符” ， 不包括数据内容本身，所以这些类型传递的开销是固定的，与数据内容大小无关。 这种只拷贝“描述符” ， 不拷贝实际数据内容的拷贝过程，也被称为 “浅拷贝” 。")]),t._v(" "),s("h2",{attrs:{id:"变长入参"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变长入参"}},[t._v("#")]),t._v(" 变长入参")]),t._v(" "),s("p",[t._v("假如声明函数时，我们还不确定会有多少个参数，就可以使用变长入参。通过 "),s("code",[t._v("...")]),t._v(" 实现。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明参数elems为可变长入参")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFnc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elems "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elems"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3个参数")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFnc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2个参数")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myFnc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("输出结果")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[1,2,3]\n[4,5]\n")])])]),s("p",[t._v("在 Go 中， 变长参数实际上是通过切片来实现的 。 所以，我们在函数体中， 就可以使用切片支持的所有操作来操作变长参数，这会大大简化了变长参数的使用复杂度。")]),t._v(" "),s("h2",{attrs:{id:"支持多返回值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#支持多返回值"}},[t._v("#")]),t._v(" 支持多返回值")]),t._v(" "),s("p",[t._v("Go 函数支持多返回值:")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//无返回值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),t._v("                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//仅有一个返回值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//有2或2个以上返回值")]),t._v("\n")])])]),s("p",[t._v("如果是 2 个或 2 个以上的返回值，我们需要用括号括起来")])])}),[],!1,null,null,null);s.default=e.exports}}]);